{"version":3,"sources":["component/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","sections","document","querySelectorAll","navLi","useState","showBackground","setShowBackground","bodyElement","useRef","getElementsByTagName","htmlElement","handleClick","style","scrollSnapType","useEffect","handleScroll","e","window","scrollY","innerHeight","current","forEach","section","sectionTop","offsetTop","sectionHeight","clientHeight","getAttribute","li","classList","remove","contains","add","addEventListener","removeEventListener","className","onClick","smooth","to","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mTAiGeA,EA3FA,WAEX,IAAMC,EAAWC,SAASC,iBAAiB,WACrCC,EAAQF,SAASC,iBAAiB,yCAGxC,GAFyBD,SAASC,iBAAiB,oBAEPE,mBAAS,OAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAIMC,GAFWC,mBAEGP,SAASQ,qBAAqB,QAAQ,IACpDC,EAAcT,SAASQ,qBAAqB,QAAQ,GACpDE,EAAc,WAChBJ,EAAYK,MAAMC,eAAe,OACjCH,EAAYE,MAAMC,eAAe,QA+CrC,OA5CAC,qBAAU,WACN,IAAMC,EAAe,SAACC,GAEdC,OAAOC,SAAW,GAAKD,OAAOC,SAAWD,OAAOE,YAAc,EAC9Db,GAAkB,GAOlBA,GAAkB,GAQtB,IAAIc,EAAU,GACdpB,EAASqB,SAAS,SAACC,GACf,IAAMC,EAAaD,EAAQE,UACrBC,EAAgBH,EAAQI,aAE1BT,OAAOC,SAAYK,EAAY,GAAIA,GAAeN,OAAOC,SAAaK,EAAaE,IAEnFL,EAAUE,EAAQK,aAAa,UAIvCxB,EAAMkB,SAAQ,SAACO,GACXA,EAAGC,UAAUC,OAAO,UAChBF,EAAGC,UAAUE,SAASX,IACxBQ,EAAGC,UAAUG,IAAI,cAM3B,OADA/B,SAASgC,iBAAiB,SAAUlB,GAC7B,WACHd,SAASiC,oBAAoB,SAAUnB,MAE5C,CAACV,IAMC,aAHD,CAGC,OAAK8B,UAAW9B,EAAe,0BAA0B,kBAAzD,SAEG,qBAAK8B,UAAW9B,EAAe,wBAAwB,gBAAvD,SACI,qBAAI8B,UAAU,WAAd,UACI,cAAC,OAAD,CAAMC,QAASzB,EAAa0B,QAAM,EAACC,GAAG,OAAtC,SACI,oBAAIH,UAAU,OAAd,uBAEJ,cAAC,OAAD,CAAMC,QAASzB,EAAa0B,QAAM,EAACC,GAAG,UAAtC,SACI,oBAAIH,UAAU,UAAd,2BAEJ,cAAC,OAAD,CAAMC,QAASzB,EAAa0B,QAAM,EAACC,GAAG,cAAtC,SACI,oBAAIH,UAAU,cAAd,6BAEJ,cAAC,OAAD,CAAMC,QAASzB,EAAa0B,QAAM,EAACC,GAAG,SAAtC,SACI,oBAAIH,UAAU,SAAd,yBAEJ,cAAC,OAAD,CAAMC,QAASzB,EAAa0B,QAAM,EAACC,GAAG,UAAtC,SACI,oBAAIH,UAAU,UAAd,kC,kBChDTI,MAjCf,WACE,IAoBA,EAAoCnC,oBAAS,GAA7C,mBACA,OADA,UAEE,sBAAK+B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,yBAASK,GAAG,aCpBHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnD,SAASoD,eAAe,SAM1BZ,M","file":"static/js/main.c1dfdfd3.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react'\r\nimport './Navbar.css'\r\nimport {Link} from 'react-scroll'\r\nimport { useEffect } from 'react/cjs/react.development';\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n    const sections = document.querySelectorAll(\"section\");\r\n    const navLi = document.querySelectorAll(\".navbarContainer .textContainer ul li\");\r\n    const navbarContainer =  document.querySelectorAll(\".navbarContainer\");\r\n\r\n    const [showBackground, setShowBackground] = useState(null)\r\n    \r\n    const aboutRef = useRef();\r\n\r\n    const bodyElement = document.getElementsByTagName(\"BODY\")[0];\r\n    const htmlElement = document.getElementsByTagName(\"HTML\")[0];\r\n    const handleClick = () => {\r\n        bodyElement.style.scrollSnapType='none'\r\n        htmlElement.style.scrollSnapType='none'\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleScroll = (e) => {   \r\n            \r\n            if (window.scrollY >= 0 && window.scrollY <= window.innerHeight / 2) {\r\n                setShowBackground(false)\r\n                // console.log(showBackground)\r\n                // Set states for nav items here if the user is on the first section\r\n                // } else if (aboutRef.current.  - window.scrollY < window.innerHeight / 2 && stuffRef.current.offsetTop - window.scrollY >= window.innerHeight / 2) {\r\n                    // For the about section\r\n            } else {\r\n                \r\n                setShowBackground(true)\r\n                \r\n                // console.log(showBackground)\r\n                // Etc...\r\n            }\r\n\r\n                // console.log(window.scrollY >= 0 && window.scrollY <= window.innerHeight / 2)\r\n                // console.log(window.innerHeight)\r\n            let current = ''\r\n            sections.forEach( (section)=> {\r\n                const sectionTop = section.offsetTop;\r\n                const sectionHeight = section.clientHeight;\r\n\r\n                if (window.scrollY >= (sectionTop- 0.1*sectionTop) && window.scrollY <= ( sectionTop + sectionHeight ) ){\r\n                    // console.log(sectionTop, sectionHeight)\r\n                    current = section.getAttribute('id')\r\n                    // console.log(current)\r\n                }\r\n            })\r\n            navLi.forEach((li) => {\r\n                li.classList.remove(\"active\");\r\n                if (li.classList.contains(current)) {\r\n                  li.classList.add(\"active\");\r\n                }\r\n              });\r\n        }\r\n\r\n        document.addEventListener('scroll', handleScroll);\r\n        return () => {\r\n            document.removeEventListener('scroll', handleScroll);\r\n        }\r\n    }, [showBackground])\r\n\r\n    return (\r\n        // <div \r\n        // className={setShowBackground?'navbarContainer':'navbarContainer--active'}\r\n        // >\r\n         <div className={showBackground?'navbarContainer--active':'navbarContainer'}> \r\n                {/* {console.log(showBackground)} */}\r\n            <div className={showBackground?'textContainer--active':'textContainer'}>\r\n                <ul className='textList'>\r\n                    <Link onClick={handleClick} smooth to='home'>\r\n                        <li className='home'>  Home </li>\r\n                    </Link>\r\n                    <Link onClick={handleClick} smooth to='aboutMe'>\r\n                        <li className='aboutMe'>  About Me </li>\r\n                    </Link>  \r\n                    <Link onClick={handleClick} smooth to='experiences'>\r\n                        <li className='experiences'>  Experience </li>\r\n                    </Link>  \r\n                    <Link onClick={handleClick} smooth to='skills'>\r\n                        <li className='skills'>  Skills </li>\r\n                    </Link>\r\n                    <Link onClick={handleClick} smooth to='contact'>\r\n                        <li className='contact'>  Contact </li>\r\n                    </Link>\r\n                </ul>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nimport Navbar from \"./component/Navbar\";\nimport jsonData from \"./data/data.json\";\nimport { Parallax } from \"react-parallax\";\nimport { ExternalLink } from \"react-external-link\";\nfunction App() {\n  const inlineStyle = {\n    // background: '#fff',\n    background: \"transparent\",\n    color: \"white\",\n    left: \"50%\",\n    top: \"65%\",\n    position: \"absolute\",\n    padding: \"20px\",\n    transform: \"translate(-50%, -50%)\",\n    // fontSize:'40px',\n    alignContent: \"center\",\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    verticalAlign: \"middle\",\n    lineHeight: \"20px\",\n    fontWeight: \"100\",\n    letterSpacing: \".15em\",\n    whiteSpace: \"nowrap\",\n  };\n\n  const [snapScroll, setSnapScroll] = useState(true);\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <section id=\"home\">\n        {/* <HomeSection /> */}\n      </section>\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}